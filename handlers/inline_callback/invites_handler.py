import datetime

from telegram import InlineKeyboardMarkup, InlineKeyboardButton

import phrases
from database_models.invite import Invite
from models.bot_context import BotContext
from utils.callback_utils import ConfigurableCallbackList, CallbackList
from utils.datetime_utils import DateTimeUtils


async def handle_invites_callback(ctx: BotContext, query_data: str) -> bool:
    """
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç can_continue
    """
    if ConfigurableCallbackList.invite_overview.matches(query_data):
        invite = ConfigurableCallbackList.invite_overview.extract_value(query_data)
        return await overview(ctx, invite)

    return True


async def overview(ctx: BotContext, invite_id: str) -> bool:
    """
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç can_continue
    """
    invites = Invite.find(Invite.id == invite_id).all()

    if not invites:
        await ctx.answer_callback("—ç—Ç–æ—Ç –∏–Ω–≤–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üö´")
        return False

    invite = invites[0]

    if invite.used:
        await ctx.answer_callback("—ç—Ç–æ—Ç –∏–Ω–≤–∞–π—Ç –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ‚ö†Ô∏è")
        return False

    if invite.spoiled:
        await ctx.answer_callback("—ç—Ç–æ—Ç –∏–Ω–≤–∞–π—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω ‚è∞")
        return False

    message = (
        f"<b>üîó –∏–Ω–≤–∞–π—Ç ‚Ññ{invite.id}</b>\n\n<b>–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:</b> <code>{invite.get_url()}</code>\n"
        f"<b>–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ:</b> "
        f"{DateTimeUtils.day_and_month_in_words(invite.issue_date + datetime.timedelta(days=2))}"
    )

    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton(phrases.go_back, callback_data=CallbackList.invites)]]
    )

    await ctx.update_message(message, reply=keyboard)
    return False
