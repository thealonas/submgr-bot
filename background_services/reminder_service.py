import datetime
from enum import Enum

import sentry_sdk
import telegram
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Bot
from telegram.constants import ParseMode

from background_services.repeating_service import RepeatingService
from database_models.invoice import Invoice
from models.bot_context import BotContext
from modules.invoice_module import InvoiceModule
from utils.callback_utils import ConfigurableCallbackList
from utils.datetime_utils import DateTimeUtils


class DelayType(Enum):
    TwoDaysBefore = (0,)
    PayDay = (1,)
    TwoDaysPast = 2


class ReminderService(RepeatingService):
    bot: telegram.Bot

    TWO_DAYS_BEFORE = (
        "<b>üí∏ –Ω–∞–ø–æ–º–∏–Ω–∞—é –ø—Ä–æ –æ–ø–ª–∞—Ç—É (‚Ññ{INVOICE})</b>\n\n<b>–ø–æ–¥–ø–∏—Å–∫–∏:</b>\n{SUB}\n"
        "<b>—Ü–µ–Ω–∞:</b> ‚Ç¨<code>{SUM}</code>\n<b>–æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ:</b> {PAY_TILL}"
    )

    PAY_DAY = (
        "–ø—Ä–∏–≤–µ—Ç! üëã\n\n–∫–∞–∂–µ—Ç—Å—è, —Ç—ã –∑–∞–±—ã–ª –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç ‚Ññ{INVOICE} ‚òπÔ∏è\n\n"
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏ –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–≤—É—Ö –¥–Ω–µ–π, –∏–Ω–∞—á–µ –º—ã –±—É–¥–µ–º –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É "
        "–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É üí£\n\n–µ—Å–ª–∏ —Ç—ã –¥—É–º–∞–µ—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –æ—à–∏–±–∫–µ, "
        "—Å–≤—è–∂–∏—Å—å —Å @likhner –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ üì©"
    )

    TWO_DAYS_PAST = (
        "–ø—Ä–∏–≤–µ—Ç! üëã\n\n—Å –≥—Ä—É—Å—Ç—å—é —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∏–∑-–∑–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–æ–∫, "
        "–º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Ç–≤–æ–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–∞–º üòû\n\n–Ω–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, "
        "–¥–æ—Å—Ç—É–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ–∑ –æ–ø–ª–∞—Ç—ã –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —à—Ç—Ä–∞—Ñ–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ üíî\n\n–µ—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, "
        "—á—Ç–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Å—å —Å @likhner –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ, "
        "—á—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ üì©"
    )

    def __init__(self, bot: Bot):
        now = datetime.datetime.now()
        super().__init__(
            24 * 60 * 60, datetime.datetime(now.year, now.month, now.day, 12, 0, 0)
        )
        self.name = "ReminderService"
        self.bot = bot

    async def do_work_async(self):
        invoices = [i for i in Invoice.find().all() if not i.paid]
        if not invoices:
            return

        for invoice in invoices:
            try:
                if invoice.pay_till == datetime.date.today():
                    await ReminderService.send_reminder(
                        self.bot, invoice, DelayType.PayDay
                    )
                elif invoice.pay_till == datetime.date.today() - datetime.timedelta(
                    days=2
                ):
                    await ReminderService.send_reminder(
                        self.bot, invoice, DelayType.TwoDaysPast
                    )
                elif invoice.pay_till == datetime.date.today() + datetime.timedelta(
                    days=2
                ):
                    await ReminderService.send_reminder(
                        self.bot, invoice, DelayType.TwoDaysBefore
                    )
                else:
                    continue
            except Exception as e:
                sentry_sdk.capture_exception(e)
                continue

    @staticmethod
    async def remind_invoice(
        ctx: BotContext, invoice_id: str, update_message: bool
    ) -> bool:
        invoices = Invoice.find(Invoice.invoice_id == invoice_id).all()
        if not invoices:
            return False

        invoice = invoices[0]

        if invoice.pay_till == datetime.date.today():
            await ReminderService.send_reminder(
                None, invoice, DelayType.PayDay, ctx, update_message
            )
        elif invoice.pay_till == datetime.date.today() - datetime.timedelta(days=2):
            await ReminderService.send_reminder(
                None, invoice, DelayType.TwoDaysPast, ctx, update_message
            )
        elif invoice.pay_till == datetime.date.today() + datetime.timedelta(days=2):
            await ReminderService.send_reminder(
                None, invoice, DelayType.TwoDaysBefore, ctx, update_message
            )

        return False

    @staticmethod
    async def send_reminder(
        bot: Bot | None,
        invoice: Invoice,
        delay_type: DelayType,
        ctx: BotContext | None = None,
        update_message: bool = False,
    ):
        invoice_phrase = invoice.invoice_id
        sub_phrase = "\n".join(
            [InvoiceModule.generate_sub_phrase(i) for i in invoice.subscriptions]
        )
        pay_till_phrase = DateTimeUtils.day_and_month_in_words(invoice.pay_till)
        sum_phrase = f"{invoice.total_price:.2f}"

        match delay_type:
            case DelayType.TwoDaysBefore:
                message = ReminderService.TWO_DAYS_BEFORE
                can_pay = True
            case DelayType.PayDay:
                message = ReminderService.PAY_DAY
                can_pay = True
            case DelayType.TwoDaysPast:
                message = ReminderService.TWO_DAYS_PAST
                can_pay = False
            case _:
                raise RuntimeError(f"Unknown delay type {delay_type}")

        message = (
            message.replace("{INVOICE}", invoice_phrase)
            .replace("{SUB}", sub_phrase)
            .replace("{PAY_TILL}", pay_till_phrase)
            .replace("{SUM}", sum_phrase)
        )

        keyboard = (
            InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "üì™ –æ–ø–ª–∞—Ç–∏—Ç—å",
                            callback_data=ConfigurableCallbackList.invoice_pay_notify.box_value(
                                invoice.invoice_id
                            ),
                        )
                    ]
                ]
            )
            if can_pay
            else None
        )

        try:
            if not update_message or not ctx:
                await bot.send_message(
                    invoice.user,
                    message,
                    parse_mode=ParseMode.HTML,
                    reply_markup=keyboard,
                    disable_web_page_preview=True,
                )
            else:
                await ctx.update_message(message, reply=keyboard)
        except Exception as e:
            sentry_sdk.capture_exception(e)
